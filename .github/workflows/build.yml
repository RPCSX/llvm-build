name: Build LLVM

on:
  workflow_dispatch:
    inputs:
      checkoutversion:
        description: Git Checkout Version
        type: string

concurrency:
  group: ${{ github.ref }}-${{ github.event_name }}-${{ inputs.checkoutversion }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows
            arch: x64
            arch-tripple: x86_64
            runtime: MD
            runner: windows-2025
          - os: windows
            arch: x64
            arch-tripple: x86_64
            runtime: MT
            runner: windows-2025
          - os: windows
            arch: x64
            arch-tripple: x86_64
            runtime: MDd
            runner: windows-2025
          - os: windows
            arch: x64
            arch-tripple: x86_64
            runtime: MTd
            runner: windows-2025
          - os: linux
            arch: x64
            arch-tripple: x86_64
            runner: ubuntu-24.04
          - os: linux
            arch: aarch64
            arch-tripple: aarch64
            runner: ubuntu-24.04-arm
    name: ${{ matrix.os }} ${{ matrix.arch }} ${{ matrix.runtime }}
    runs-on: ${{ matrix.runner }}
    env:
      PACKAGE_NAME: llvm-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.runtime }}

    steps:
      - name: Maximize build space
        if: matrix.os != 'windows'
        uses: easimon/maximize-build-space@master
        with:
            root-reserve-mb: 16384
            swap-size-mb: 16384
            remove-dotnet: 'true'
            remove-haskell: 'true'
            remove-codeql: 'true'
            remove-docker-images: 'true'

      - name: Clone LLVM
        run: git clone --depth 1 --branch llvmorg-${{ inputs.checkoutversion }} https://github.com/llvm/llvm-project.git

      - name: Configure LLVM (Windows)
        if: matrix.os == 'windows'
        run: |
          cmake \
            -G "Visual Studio 17 2022" \
            -B llvm_build -S llvm-project/llvm \
            -DCPACK_GENERATOR=7Z \
            -Thost=${{ matrix.arch }} \
            -DLLVM_ENABLE_PROJECTS="clang;mlir" \
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64" \
            -DLLVM_DEFAULT_TARGET_TRIPLE:STRING=${{ matrix.arch-tripple }}-pc-windows-msvc \
            -DLLVM_HOST_TRIPLE:STRING=${{ matrix.arch-tripple }}-pc-${{ matrix.os }}-msvc \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_BUILD_RUNTIME=OFF \
            -DLLVM_BUILD_TOOLS=OFF \
            -DLLVM_INCLUDE_DOCS=OFF \
            -DLLVM_USE_STATIC_ZSTD=ON \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_UTILS=OFF \
            -DLLVM_USE_INTEL_JITEVENTS=ON \
            -DLLVM_ENABLE_Z3_SOLVER=OFF \
            -DCMAKE_SYSTEM_VERSION=10.0.26100 \
            -DCMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION=10.0.26100 \
            -DLLVM_USE_CRT_DEBUG=${{ matrix.runtime }} \
            -DLLVM_USE_CRT_RELEASE=${{ matrix.runtime }}

      - name: Configure LLVM (Other)
        if: matrix.os != 'windows'
        run: |
          cmake \
            -B llvm_build -S llvm-project/llvm \
            -DCMAKE_BUILD_TYPE=Release \
            -DCPACK_GENERATOR=7Z \
            -DLLVM_ENABLE_PROJECTS="clang;mlir" \
            -DLLVM_TARGETS_TO_BUILD="X86;AArch64" \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_BUILD_RUNTIME=OFF \
            -DLLVM_BUILD_TOOLS=OFF \
            -DLLVM_INCLUDE_DOCS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_USE_STATIC_ZSTD=ON \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_UTILS=OFF \
            -DLLVM_USE_INTEL_JITEVENTS=ON \
            -DLLVM_ENABLE_Z3_SOLVER=OFF

      - name: Build LLVM (Windows)
        if: matrix.os == 'windows'
        run: cmake --build llvm_build --config Release --target=package -- /maxcpucount

      - name: Build LLVM (Other)
        if: matrix.os != 'windows'
        run: cmake --build llvm_build --target=package

      - name: Move Package
        run: mv llvm_build/*.7z ${{ env.PACKAGE_NAME }}.7z

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.checkoutversion }}
          prerelease: false
          make_latest: true
          files: ${{ env.PACKAGE_NAME }}.7z

  android-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
          root-reserve-mb: 16384
          swap-size-mb: 16384
          remove-dotnet: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

    - name: Clone LLVM
      run: git clone --depth 1 --branch llvmorg-${{ inputs.checkoutversion }} https://github.com/llvm/llvm-project.git

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Install Ninja
      run: |
        sudo apt update
        sudo apt install ninja-build

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install packages
      run: yes | sdkmanager "cmake;3.31.5" "ndk;27.0.12077973"

    - name: Configure arm64-v8a
      run: |
        $ANDROID_SDK_ROOT/cmake/3.31.5/bin/cmake \
        -S llvm-project/llvm \
        -Bbuild-arm64-v8a \
        -DCPACK_GENERATOR=7Z \
        -DANDROID_ABI=arm64-v8a \
        -DANDROID_PLATFORM=android-31 \
        -DANDROID_NDK=$ANDROID_SDK_ROOT/ndk/27.0.12077973 \
        -DCMAKE_TOOLCHAIN_FILE=$ANDROID_SDK_ROOT/ndk/27.0.12077973/build/cmake/android.toolchain.cmake \
        -DLLVM_ENABLE_PROJECTS="mlir" \
        -DLLVM_TARGETS_TO_BUILD="AArch64" \
        -DLLVM_BUILD_RUNTIME=OFF \
        -DLLVM_BUILD_TOOLS=OFF \
        -DLLVM_INCLUDE_DOCS=OFF \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_INCLUDE_BENCHMARKS=OFF \
        -DLLVM_INCLUDE_UTILS=OFF \
        -DLLVM_USE_INTEL_JITEVENTS=OFF \
        -DLLVM_ENABLE_Z3_SOLVER=OFF \
        -DLLVM_USE_STATIC_ZSTD=ON \
        -DCMAKE_BUILD_TYPE=Release -G Ninja

    - name: Configure x86-64
      run: |
        $ANDROID_SDK_ROOT/cmake/3.31.5/bin/cmake \
        -S llvm-project/llvm \
        -Bbuild-x86-64 \
        -DCPACK_GENERATOR=7Z \
        -DANDROID_ABI=x86_64 \
        -DANDROID_PLATFORM=android-31 \
        -DANDROID_NDK=$ANDROID_SDK_ROOT/ndk/27.0.12077973 \
        -DCMAKE_TOOLCHAIN_FILE=$ANDROID_SDK_ROOT/ndk/27.0.12077973/build/cmake/android.toolchain.cmake \
        -DLLVM_ENABLE_PROJECTS="mlir" \
        -DLLVM_TARGETS_TO_BUILD="X86" \
        -DLLVM_BUILD_RUNTIME=OFF \
        -DLLVM_BUILD_TOOLS=OFF \
        -DLLVM_INCLUDE_DOCS=OFF \
        -DLLVM_INCLUDE_EXAMPLES=OFF \
        -DLLVM_INCLUDE_TESTS=OFF \
        -DLLVM_INCLUDE_BENCHMARKS=OFF \
        -DLLVM_INCLUDE_UTILS=OFF \
        -DLLVM_USE_INTEL_JITEVENTS=OFF \
        -DLLVM_ENABLE_Z3_SOLVER=OFF \
        -DLLVM_USE_STATIC_ZSTD=ON \
        -DCMAKE_BUILD_TYPE=Release -G Ninja

    - name: Build arm64-v8a
      run: |
        $ANDROID_SDK_ROOT/cmake/3.31.5/bin/cmake --build build-arm64-v8a --target package
        mv build-arm64-v8a/*.7z llvm-android-arm64-v8a.7z

    - name: Build x86-64
      run: |
        $ANDROID_SDK_ROOT/cmake/3.31.5/bin/cmake --build build-x86-64 --target package
        mv build-x86-64/*.7z llvm-android-x64.7z

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ inputs.checkoutversion }}
        prerelease: false
        make_latest: true
        files: |
          llvm-android-arm64-v8a.7z
          llvm-android-x64.7z
